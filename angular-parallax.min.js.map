{"version":3,"sources":["module.js","helper.js","parallax.js"],"names":[],"mappings":"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","file":"angular-parallax.min.js","sourcesContent":["angular.module('duParallax', ['duScroll', 'duParallax.directive', 'duParallax.helper']).value('duParallaxTouchEvents', true);\r\n","angular.module('duParallax.helper', []).\r\nfactory('parallaxHelper',\r\n  function() {\r\n    function createAnimator (factor, max, min, offset) {\r\n      return function(params) {\r\n        var delta = factor*((offset || 0) + params.elemY);\r\n        if(angular.isNumber(max) && delta > max) return max;\r\n        if(angular.isNumber(min) && delta < min) return min;\r\n        return delta;\r\n      };\r\n    }\r\n    return {\r\n      createAnimator: createAnimator,\r\n      background:     createAnimator(-0.3, 150, -30, 50)\r\n    };\r\n});\r\n","angular.module('duParallax.directive', ['duScroll']).\r\ndirective('duParallax',\r\n  function($rootScope, $window, $document, duParallaxTouchEvents, parallaxHelper){\r\n\r\n    var test = angular.element('<div></div>')[0];\r\n    var prefixes = 'transform WebkitTransform MozTransform OTransform'.split(' '); //msTransform\r\n    var transformProperty;\r\n    for(var i = 0; i < prefixes.length; i++) {\r\n      if(test.style[prefixes[i]] !== undefined) {\r\n        transformProperty = prefixes[i];\r\n        break;\r\n      }\r\n    }\r\n\r\n    //Skipping browsers withouth transform-support.\r\n    //Could do fallback to margin or absolute positioning, but would most likely perform badly\r\n    //so better UX would be to keep things static.\r\n    if(!transformProperty || (!duParallaxTouchEvents && 'ontouchstart' in window)) {\r\n      return;\r\n    }\r\n\r\n    var translate3d = function(result) {\r\n      if(!result.x && !result.y) return '';\r\n      return 'translate3d(' + Math.round(result.x) + 'px, ' + Math.round(result.y) + 'px, 0)';\r\n    };\r\n\r\n    var rotate = function(result) {\r\n      if(!result.rotation) return '';\r\n      return ' rotate(' + (angular.isNumber(result.rotation) ? Math.round(result.rotation) + 'deg' : result.rotation) +  ')';\r\n    };\r\n\r\n    var applyProperties = function(result, element) {\r\n      element.style[transformProperty] = translate3d(result) + rotate(result);\r\n      element.style.opacity = result.opacity;\r\n      if(result.custom) {\r\n        angular.extend(element.style, result.custom);\r\n      }\r\n    };\r\n\r\n    return{\r\n      scope : {\r\n        y : '=',\r\n        x : '=',\r\n        rotation : '=',\r\n        opacity : '=',\r\n        custom : '=',\r\n        animatorY: '&',\r\n        animatorX: '&'\r\n      },\r\n      link: function($scope, $element, $attr){\r\n        var element = $element[0];\r\n        var currentProperties;\r\n        var inited = false;\r\n\r\n        var onScroll = function(){\r\n          var scrollY = $document.scrollTop();\r\n          var rect = element.getBoundingClientRect();\r\n          if(!inited) {\r\n            inited = true;\r\n            angular.element($window).on('load', function init() {\r\n              //Trigger the onScroll until position stabilizes. Don't know why this is needed.\r\n              //TODO: Think of more elegant solution.\r\n              var i = 0;\r\n              var maxIterations = 10;\r\n              var currentY = rect.top;\r\n              var lastY;\r\n              do {\r\n                lastY = currentY;\r\n                onScroll();\r\n                currentY = element.getBoundingClientRect().top;\r\n                i++;\r\n              } while(i < maxIterations && lastY !== currentY);\r\n            });\r\n          }\r\n\r\n          var param = {\r\n            scrollY : scrollY,\r\n            elemX: rect.left,\r\n            elemY: rect.top\r\n          };\r\n\r\n          var properties = { x : 0, y : 0, rotation : 0, opacity: 1, custom: undefined};\r\n\r\n          //Create animator y from scope\r\n          if (angular.isDefined($scope.animatorY())) {\r\n            var animator_y = $scope.animatorY();\r\n\r\n            animator_y.factor = animator_y.factor ? animator_y.factor : 0;\r\n            animator_y.max = animator_y.max ? animator_y.max : 0;\r\n            animator_y.min = animator_y.min ? animator_y.min : 0;\r\n            animator_y.offset = animator_y.offset ? animator_y.offset : 0;\r\n\r\n            $scope.y = parallaxHelper.createAnimator(animator_y.factor, animator_y.max, animator_y.min, animator_y.offset);\r\n          }\r\n\r\n          //Create animator x from scope\r\n          if (angular.isDefined($scope.animatorX())) {\r\n              var animator_x = $scope.animatorX();\r\n\r\n              animator_x.factor = animator_x.factor ? animator_x.factor : 0;\r\n              animator_x.max = animator_x.max ? animator_x.max : 0;\r\n              animator_x.min = animator_x.min ? animator_x.min : 0;\r\n              animator_x.offset = animator_x.offset ? animator_x.offset : 0;\r\n\r\n              $scope.x = parallaxHelper.createAnimator(animator_x.factor, animator_x.max, animator_x.min, animator_x.offset);\r\n          }\r\n\r\n          for(var key in properties){\r\n            if(angular.isFunction($scope[key])){\r\n              properties[key] = $scope[key](param);\r\n            } else if($scope[key]){\r\n              properties[key] = $scope[key];\r\n            }\r\n          }\r\n\r\n          //Detect changes, if no changes avoid reflow\r\n          var hasChange = angular.isUndefined(currentProperties);\r\n          if(!hasChange) {\r\n            for(key in properties){\r\n              if(properties[key] !== currentProperties[key]) {\r\n                hasChange = true;\r\n                break;\r\n              }\r\n            }\r\n          }\r\n\r\n          if(hasChange) {\r\n            applyProperties(properties, element);\r\n            currentProperties = properties;\r\n          }\r\n        };\r\n\r\n        $document.on('scroll touchmove', onScroll).triggerHandler('scroll');\r\n\r\n        $scope.$on('$destroy', function() {\r\n          $document.off('scroll touchmove', onScroll);\r\n        });\r\n      }\r\n    };\r\n});\r\n"]}